/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/DOM.js */ \"./src/modules/DOM.js\");\n/* harmony import */ var _modules_Player_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/Player.js */ \"./src/modules/Player.js\");\n\n\n\n\n\nconst shipSize = {carrier: 5, battleship: 4, submarine: 3, 'patrol-boat': 2, destroyer: 3, none: 0};\nconst MODE = \"BOT\";\n\nlet board1 = document.querySelector('.board-1');\nlet board2 = document.querySelector('.board-2');\n\n(0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.createBoard)(board1);\n(0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.createBoard)(board2);\n\nlet gameEvent = 'start';\nlet player1;\nlet player2;\nlet playerTurn = 0;\n\nswitch (MODE) {\n    case 'PVP':\n        break;\n    default:\n        player1 = (0,_modules_Player_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Chad\", 1);\n        player2 = (0,_modules_Player_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"BOT\", 2);\n}\n\n// player1.playerBoard.placeShip([2, 2], 'y', 3);\n// player1.playerBoard.placeShip([0,4], 'x', 3);\n\n// player2.playerBoard.placeShip([2, 2], 'y', 3);\n// player2.playerBoard.placeShip([0,4], 'x', 3);\n// player1.doRandomShot(player2);\n\n// drawBoard(player1);\n// drawBoard(player2);\n\n//CPU GAME.\n/* Order of events:\n    1. Start Button\n    2. Select Positions.\n    3. Start game.\n    4. Play game.\n    5. Restart Button\n*/\nlet gameStartBtn = document.querySelector('.game-start-button');\nlet selectMenu = document.querySelector('.select-position');\nlet selectShipsLi = document.querySelectorAll('.select-ship');\nconst selectBoard = selectMenu.querySelector('.select-board');\nconst rotateButton = document.querySelector('.rotate-ship');\nconst mainGameContainer = document.querySelector('.board-container')\nlet selectBoardCells = [];\nlet selectedShip = 'none';\nlet rotation = 'x';\nlet selectedShipsLeft = 5;\nlet selectDoneBtn = document.querySelector('.select-done-button')\nconst selectPlayer = (0,_modules_Player_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('Select', 'd');\n//Start Button\ngameStartBtn.addEventListener('click', ()=> {\n    gameStartBtn.classList.add('hidden');\n    gameEvent = 'selectPos';\n    //Show Select\n    \n    (0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.createBoard)(selectBoard);\n    let selectBoardCells = selectBoard.querySelectorAll('.cell')\n    selectBoardCells.forEach((val)=> {\n        const row = val.id.charAt(3);\n            const column = val.id.charAt(5);\n        val.addEventListener('mouseover', ()=> {\n            \n            \n            for (let i = 0; i < shipSize[selectedShip]; i++) {\n                const rotationAdd = rotation == 'x' ? [0, i] : [i, 0];\n                const otherCell = document.querySelector(`#pd-${+row + rotationAdd[0]}-${+column+ rotationAdd[1]}`)\n                if (selectPlayer.playerBoard.validCoords([+row, +column], shipSize[selectedShip], rotation)) {\n                    otherCell ? otherCell.classList.add('valid') :'none';\n                } else {\n                \n                otherCell ? otherCell.classList.add('invalid') : 'none';\n            }\n\n            }\n        })\n        val.addEventListener('mouseleave', ()=> {\n            for (let i = 0; i < shipSize[selectedShip]; i++) {\n                const rotationAdd = rotation == 'x' ? [0, i] : [i, 0]\n                const otherCell = document.querySelector(`#pd-${+row + rotationAdd[0]}-${+column+ rotationAdd[1]}`)\n                if (otherCell) {\n                    otherCell.classList.remove('invalid')\n                    otherCell.classList.remove('valid')\n                }\n            }\n        })\n    });\n    selectMenu.classList.remove('hidden');\n\n     \n});\n//Select Position\n\n\nselectShipsLi.forEach((val) => {\n    val.addEventListener('click', (e)=> {\n        if  (gameEvent == 'selectPos' && selectedShip == 'none') {\n            selectedShip = val.classList[0];\n            val.classList.add('hidden')\n        }   \n    })\n});\n\n\nselectBoard.addEventListener('click', (e) => {\n    //using bubbling.\n    const row = e.target.id.charAt(3);\n    const column = e.target.id.charAt(5);\n    if (gameEvent == 'selectPos') {\n        switch (selectedShip) {\n            case 'none': \n                return;\n            default:\n                if (player1.playerBoard.placeShip([+row, +column], rotation, shipSize[selectedShip])) {\n                    selectPlayer.playerBoard.placeShip([+row, +column], rotation, shipSize[selectedShip]);\n                    selectedShip = 'none';\n                    rotation = 'x'; \n                    (0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.drawBoard)(selectPlayer);\n                    selectedShipsLeft--;\n                    if (selectedShipsLeft == 0) {\n                        selectDoneBtn.classList.remove('hidden')\n                    }\n                }\n                \n        }\n    }\n})\n\n\n\n\nrotateButton.addEventListener('click', ()=> {\n    rotation = rotation == 'x' ? 'y' : 'x';\n})\n\nselectDoneBtn.addEventListener('click', ()=> {\n    gameEvent = 'playing';\n    selectMenu.classList.add('hidden');\n    (0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.drawBoard)(player1);\n    player2.playerBoard.createRandomBoard();\n    mainGameContainer.classList.remove('hidden')\n})\n\n\nlet shotLength = 0;\nlet result = {shotHit: false, triedDirection: [0,0,0,0], endsReached: 0, direction: [0,0] }\nlet firstResult;\nlet enemyBoard = document.querySelectorAll(\".board-2 .cell\");\nlet playerCount = document.querySelector('.count-hit2');\nlet enemyCount = document.querySelector('.count-hit');\nenemyBoard.forEach((elem) => {\n    elem.addEventListener('click', (e)=> {\n        if (playerTurn != 0 ) {\n            return\n        }\n\n        let id = elem.getAttribute('id');\n        let row = id.charAt(3);\n        let column = id.charAt(5);\n        if (player1.playerTurn([+row, +column], player2.playerBoard)) {\n            playerTurn = 1;\n            (0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.drawBoard)(player2, true);\n            if (player2.playerBoard.reportAllSunk()) {\n                console.log(\"NICE YOU WIN!!\")\n                playerTurn = 100;\n                return\n            }\n\n            if (MODE == 'BOT') {\n                \n                if (shotLength > 0 && shotLength < 5) {\n                    if (result == 'done') {\n                        shotLength = 0;\n                        result = {shotHit: false, triedDirection: [0,0,0,0], endsReached: 0, direction: [0,0] };\n\n                    } else {\n                        result = player2.doSmartShot(player1, result.hit, result.triedDirection, result.direction, shotLength, result.endsReached);\n                        if (result == 'redo') {\n                            shotLength = 0;\n                            result = {shotHit: false, triedDirection: [0,0,0,0], endsReached: 0, direction: [0,0] };\n                            // firstResult = player2.doRandomShot(player1);\n                        }\n                    }\n                    \n\n                    \n                } \n\n                if (shotLength == 0 || shotLength >= 5 ) {\n                    shotLength = 0;\n                    firstResult = player2.doRandomShot(player1);\n                }\n                \n                if (result.shotHit || firstResult.shotHit) {\n                    shotLength += 1;\n                    if (firstResult.shotHit) {\n                        result.hit = [...firstResult.shot];\n                    }\n                    firstResult.shotHit = false;\n\n                }\n                playerTurn = 0;\n                (0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.drawBoard)(player1);\n                if (player1.playerBoard.reportAllSunk()) {\n                    console.log(\"YOU LOSE!\");\n                    (0,_modules_DOM_js__WEBPACK_IMPORTED_MODULE_0__.drawBoard)(player2)\n                    playerTurn = 100;\n                    return\n                }\n            }\n\n            \n\n        }\n    }\n    )\n})\n\n\n\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/modules/DOM.js":
/*!****************************!*\
  !*** ./src/modules/DOM.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createBoard\": () => (/* binding */ createBoard),\n/* harmony export */   \"drawBoard\": () => (/* binding */ drawBoard)\n/* harmony export */ });\n/*One worry one might see is that the coordinates are not in traditional \nx and y, it is instead row and column. Keep that in mind */\nfunction createBoard(board) {\n\n    const player = board.className.slice(-1)\n\n    for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 10; j++) {\n            const newElem = document.createElement(\"div\");\n            newElem.id = `p${player}-${i}-${j}`;\n            newElem.classList.add(\"cell\");\n            board.appendChild(newElem)\n        }\n    }\n}\n\nfunction drawBoard(player, hidden=false) {\n    let board = player.playerBoard.board;\n    let playerNum = player.playerNum;\n\n    \n    //Attempt to just loop through and place accordingly\n    for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 10; j++) {\n            if (board[i][j]['ship'] && !(hidden)) {\n                let shipPart = document.querySelector(`#p${playerNum}-${i}-${j}`);\n                shipPart.classList.add('ship');\n            }\n            if (board[i][j]['hit']) {\n                let cell = document.querySelector(`#p${playerNum}-${i}-${j}`);\n                cell.classList.add('hit');\n                if (board[i][j]['ship'] && (hidden)) {\n                    cell.classList.add('ship');\n                }\n            }\n              \n            \n            \n        }\n    }\n\n    \n\n}\n\n\n\n\n//# sourceURL=webpack://battleship/./src/modules/DOM.js?");

/***/ }),

/***/ "./src/modules/GameBoard.js":
/*!**********************************!*\
  !*** ./src/modules/GameBoard.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ship */ \"./src/modules/Ship.js\");\n\n\nconst GameBoard = () => {\n    /* Instead of keeping the shots in their own array, I have decided\n    to keep them on the board, this way you just need to give coords to hit a ship.\n    If a ship was missed, then the cell is still shot, and it will do proper DOM if it has to. */\n    \n    const board = []\n    for (let i = 0; i < 10; i++) {\n        const row = []\n        for (let j = 0; j < 10; j++) {\n            row.push({hit: false, ship: null})\n    }\n    board.push(row)\n\n\n    }\n    const ships = []\n\n    function validCoords(coords, length, rotation) {\n        //check if not on top of a ship\n        const row = +coords[0];\n        const column = +coords[1];\n        for (let i = 0; i < length; i++) {\n            let rotationAdd = rotation == 'x' ? [0, +i] : [+i, 0];\n            if (board[row + rotationAdd[0]] == undefined|| board[row + rotationAdd[0]][column + rotationAdd[1]] == undefined) {\n                return false\n            }\n            for (let add = -1; add <= 1; add++) {\n                if (board[row + rotationAdd[0]]&&board[row + rotationAdd[0]][column + rotationAdd[1] + add]) {\n                    if (board[row + rotationAdd[0]][column + rotationAdd[1] + add].ship) {\n                        return false;\n                    }\n                }\n                if (board[+row+rotationAdd[0] + add]&&board[+row+rotationAdd[0] + add][+column + rotationAdd[1]]) {\n                    if (board[+row+rotationAdd[0] + add][+column + rotationAdd[1]].ship) {\n                        return false;\n                    }\n                }\n                if (board[+row + rotationAdd[0] + add]&&board[+row + rotationAdd[0] + add][+column + rotationAdd[1] + add]) {\n                    if (board[+row + rotationAdd[0] + add][+column + rotationAdd[1] + add].ship) {\n                        \n                        return false\n                    }\n                }\n\n                if (board[+row + rotationAdd[0] - add] && board[+row + rotationAdd[0] - add][+column + rotationAdd[1] + add]) {\n                    if (board[+row + rotationAdd[0] - add][+column + rotationAdd[1] + add].ship) {\n                        \n                        return false\n                    }\n                } \n            }\n\n        \n        }\n        //check if not directly close to one WIP\n        /* to increase performance, it would be best to use the same loop from above */\n        //check if within board\n        if (coords[0] < 0 || coords[0] > 9 || coords[1] < 0 || coords[1] > 9) {\n            return false\n        }\n        return true\n        \n    }\n\n    function inBoard(coords) {\n        return !(coords[0] < 0 || coords[0] > 9 || coords[1] < 0 || coords[1] > 9);\n    }\n\n    function placeShip(coords, rotation='x', length=1) {\n        const addLength = rotation == 'x' ? [length - 1, 0] : [0, length - 1];\n\n        if (validCoords(coords, length, rotation)) {\n            const ship = (0,_Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(length);\n            this.ships.push(ship);\n            for (let i = 0; i < ship.length; i++) {\n                let x = addLength[0] ? i : 0;\n                let y = addLength[1] ? i : 0;\n                this.board[coords[0] + y][coords[1] + x][\"ship\"] = ship;\n\n            }\n            return true\n        }\n        return false  \n    }\n\n    function reportAllSunk() {\n        return this.ships.every((elem) => elem.isSunk());\n    }\n\n    function receiveAttack(coords) {\n\n        if (inBoard(coords)) {\n            const cell = this.board[coords[0]][coords[1]];\n            if (cell['hit'] == false) {\n                cell['hit'] = true;\n                const cellShip = cell['ship']\n                if (cellShip) {\n                    cellShip.hit();\n                    return 'hit'\n                }\n                return 'shot'\n            }\n            return false\n        }\n        return false\n    }\n\n    function createRandomBoard() {\n        [5,3,3,4,2].forEach((val)=> {\n            let placedShip = this.placeShip([Math.floor(Math.random() * 10), Math.floor(Math.random()* 10)], ['x','y'][Math.floor(Math.random() * 2)], val);\n        \n            while (!(placedShip)) {\n                placedShip = this.placeShip([Math.floor(Math.random() * 10), Math.floor(Math.random()* 10)], ['x','y'][Math.floor(Math.random() * 2)], val);  \n            }\n\n        })\n    }\n\n\n\n    return {board, placeShip, receiveAttack, ships, reportAllSunk, validCoords, createRandomBoard}\n}\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameBoard);\n\n//# sourceURL=webpack://battleship/./src/modules/GameBoard.js?");

/***/ }),

/***/ "./src/modules/Player.js":
/*!*******************************!*\
  !*** ./src/modules/Player.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GameBoard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameBoard */ \"./src/modules/GameBoard.js\");\n\n\nconst Player = (name, playerNum) => {\n    \n    let playerBoard = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    function doRandomShot(enemy) {\n        let shot = false;\n        while (!shot) {\n            let randomShotX = Math.floor(Math.random() * 10);\n            let randomShotY = Math.floor(Math.random() * 10);\n            let enemyBoard = enemy.playerBoard;\n            const randomShot = enemyBoard.receiveAttack([randomShotX, randomShotY]);\n            if (randomShot) {\n                shot = true;\n                if (randomShot == 'hit') {\n                    return {shotHit: true, shot: [randomShotX, randomShotY]}\n                }\n                return {shotHit: false, shot: null};\n            }\n        }\n    }\n\n    function doSmartShot(enemy, lastHit, triedDirections, direction, length, endsReached) {\n        //direction will be [ne, sw]\n        if (endsReached >= 2 || length >= 5 ) return 'done';\n        let enemyBoard = enemy.playerBoard;\n        let shot = false;\n        if (direction != null && !(direction[0] === 0 && direction[1] === 0)) {\n            if (direction[0] != 0) {\n                let sentAttack = enemyBoard.receiveAttack([lastHit[0] + direction[0], lastHit[1]]);\n                if (sentAttack) {\n                    shot = true;\n                    if (sentAttack == 'hit') {\n                        return {shotHit: true, hit: [lastHit[0] + direction[0], lastHit[1]], direction, endsReached}\n                    }\n                    if (endsReached == 1) {\n                        \n                        return 'done';\n                    }\n                    return {hit: [lastHit[0] + (direction[0] * -(length - 1)), lastHit[1]], direction :[direction[0] * -1, 0], endsReached: +endsReached + 1}\n                }\n                if (!shot) {\n                    if (+endsReached == 1) {\n                        return 'redo';\n                    }\n                    if (length < 5) {\n                        sentAttack = enemyBoard.receiveAttack([lastHit[0] - (direction[0] * (length)), lastHit[1]]);\n                        if (sentAttack) {\n                            shot = true;\n                            if (sentAttack == 'hit') {\n                                return {shotHit: true, hit: [lastHit[0] - (direction[0] * (length )), lastHit[1]], direction: [direction[0] * -1, 0], endsReached: +endsReached + 1}\n                            }\n                            \n                        }\n                        if (!shot) {\n                            return 'redo'\n                        }\n\n                    }else {\n                        return 'done';\n                    }\n                } \n\n            } else {\n                let sentAttack = enemyBoard.receiveAttack([lastHit[0], lastHit[1]  + direction[1]]);\n                if (sentAttack) {\n                    shot = true;\n                    if (sentAttack =='hit') {\n                        return {shotHit: true, hit: [lastHit[0], lastHit[1]  + direction[1]], direction, endsReached: endsReached}\n                    }\n                    if (endsReached == 1) {\n                        return 'done';\n                    }\n                    return {hit: [lastHit[0], lastHit[1] + (direction[1] * -(length - 1))], direction :[0,direction[1] * -1], endsReached: +endsReached + 1}\n                }\n                if (!shot) {\n                    if (+endsReached == 1) {\n                        return 'redo';\n                    }\n                    if (length < 5) {\n                        sentAttack = enemyBoard.receiveAttack([lastHit[0] , lastHit[1] - (direction[1] * (length))]);\n                        if (sentAttack) {\n                            shot = true;\n                            if (sentAttack == 'hit') {\n                                return {shotHit: true,hit: [lastHit[0] , lastHit[1]- (direction[1] * (length))], direction: [0,direction[1] * -1], endsReached: +endsReached + 1}\n                            }\n\n                        }\n                        if (!shot) {\n                            return 'redo'\n                        }\n\n                    } else {\n                        return 'done';\n                    }\n                }\n            }\n            \n            \n        }\n\n        if (triedDirections[0] == 0) {\n\n            let sentAttack = enemyBoard.receiveAttack([lastHit[0] + 1, lastHit[1]]);\n            let triedDirection = [...triedDirections]\n            triedDirection[0] = 1;\n            if (sentAttack) {\n                shot = true;\n                if (sentAttack == 'hit') {\n                    \n                    return {shotHit: true, hit: [lastHit[0] + 1, lastHit[1]], direction: [1,0], endsReached: triedDirections[2] == 1 ? endsReached + 1 : endsReached}\n                }\n\n                return {hit: lastHit, triedDirection, endsReached}\n            }\n            return this.doSmartShot(enemy, lastHit, triedDirection, null, length, endsReached)\n        } else if (triedDirections[1] == 0) {\n            let sentAttack = enemyBoard.receiveAttack([lastHit[0], lastHit[1] + 1]);\n            let triedDirection = [...triedDirections]\n                triedDirection[1] = 1;\n            if (sentAttack) {\n                shot = true;\n                if (sentAttack == 'hit') {\n                    return {shotHit: true, hit: [lastHit[0], lastHit[1] + 1], direction: [0,1], endsReached: triedDirections[3] == 1 ? endsReached + 1 : endsReached}\n                }\n                return {hit: lastHit, triedDirection, endsReached}\n            }\n            return this.doSmartShot(enemy, lastHit, triedDirection, null, length, endsReached)\n        } else if (triedDirections[2] == 0) {\n            let sentAttack = enemyBoard.receiveAttack([lastHit[0] - 1, lastHit[1]]);\n            let triedDirection = [...triedDirections]\n            triedDirection[2] = 1;\n            if (sentAttack) {\n                shot = true;\n                if (sentAttack == 'hit') {\n                    return {shotHit: true, hit: [lastHit[0] - 1, lastHit[1]], direction: [-1,0], endsReached: triedDirections[0] == 1 ? endsReached + 1 : endsReached}\n                }\n                \n                return {hit: lastHit, triedDirection, endsReached}\n            }\n            return this.doSmartShot(enemy, lastHit, triedDirection, null, length, endsReached)\n        }\n        else if (triedDirections[3] == 0) {\n            let sentAttack = enemyBoard.receiveAttack([lastHit[0], lastHit[1] - 1]);\n            let triedDirection = [...triedDirections]\n            triedDirection[3] = 1;\n            if (sentAttack) {\n                shot = true;\n                if (sentAttack == 'hit') {\n                    return {shotHit: true, hit: [lastHit[0], lastHit[1] -1], direction: [0,-1], endsReached: triedDirections[1] == 1 ? endsReached + 1 : endsReached}\n                }\n                \n                return {hit: lastHit, triedDirection, endsReached}\n            }\n            return this.doSmartShot(enemy, lastHit, triedDirection, null, length, endsReached)\n\n        }\n        return 'done';\n\n    }\n\n    function playerTurn(coords,enemyBoard) {\n        let shot = false;\n        return enemyBoard.receiveAttack(coords)\n        \n        \n    }\n\n    return {playerTurn, playerBoard, doRandomShot, name, playerNum, doSmartShot}\n}   \n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n//# sourceURL=webpack://battleship/./src/modules/Player.js?");

/***/ }),

/***/ "./src/modules/Ship.js":
/*!*****************************!*\
  !*** ./src/modules/Ship.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst Ship = (length) => {\n    let hitAmount = 0;\n    let sunk = false;\n    \n    function hit() {\n        this.hitAmount++;\n        if (this.hitAmount >= length) {\n            this.sunk = true;\n        }\n    }\n\n    function isSunk() {\n        return this.sunk\n    }\n    \n    \n    return {length, hit, isSunk, hitAmount, sunk};\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n//# sourceURL=webpack://battleship/./src/modules/Ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;